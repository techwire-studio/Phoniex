generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  phoneNumber  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addresses    UserAddress[]
  orders       Order[]
  reviews      Review[]
  carts        Cart[]
}

model UserAddress {
  id       String  @id @default(uuid())
  userId   String
  address  String
  city     String
  state    String
  zip      String
  country  String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Int
  categoryId  String?
  brandId     String?
  stock       Int
  images      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  carts       Cart[]
}

model Brand {
  id       String     @id @default(uuid())
  name     String     @unique
  products Product[]
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  products    Product[]
}

model Order {
  id          String     @id @default(uuid())
  userId      String
  totalAmount Int
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  Int
  quantity   Int
  price      Int
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id         String   @id @default(uuid())
  userId     String
  productId  Int
  quantity   Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  paymentMethodId String?
  status          String
  amount          Int
  createdAt       DateTime      @default(now())
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id       String    @id @default(uuid())
  name     String    @unique
  payments Payment[]
}
